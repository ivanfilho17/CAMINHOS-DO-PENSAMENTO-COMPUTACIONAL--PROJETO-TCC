import React, { useState, useEffect } from 'react';
import Quiz from '../components/Quiz';
import './IntroPage.css';
import './Module.css';
import YouTube from 'react-youtube';

// Dados para os cards interativos
const PILARES_CARDS = [
    { id: 1, pilar: 'Decomposi√ß√£o', icone: 'üß©', frenteIcone: 'üß©', versoTexto: '√â o que voc√™ faz ao planejar uma festa: voc√™ n√£o pensa "fazer festa" de uma vez. Voc√™ quebra em partes: 1. Lista de convidados. 2. Enviar convites. 3. Comprar comida. 4. Decorar.' },
    { id: 2, pilar: 'Padr√µes', icone: 'üé®', frenteIcone: 'üîÑ', versoTexto: '√â o que voc√™ faz ao notar que toda vez que chove, voc√™ precisa de um guarda-chuva. Voc√™ percebe uma regra ou padr√£o que se repete.' },
    { id: 3, pilar: 'Abstra√ß√£o', icone: 'üéØ', frenteIcone: 'üòÄ', versoTexto: '√â o que voc√™ faz ao desenhar um emoji feliz. Voc√™ ignora a cor do cabelo, formato do nariz e foca S√ì no essencial: olhos e boca sorrindo para mostrar "felicidade".' },
    { id: 4, pilar: 'Algoritmos', icone: 'üë£', frenteIcone: 'üó∫Ô∏è', versoTexto: '√â a sua receita de bolo! Um passo a passo que qualquer pessoa pode seguir para chegar ao mesmo resultado. √â o passo final que junta todas as outras ideias.' },
];

export default function IntroPage({ quizData, onBackHome, onCompleteIntro, onOpenModule }) {
    const [tela, setTela] = useState('teoria'); // 'teoria', 'quiz', 'conclusaoIntro'
    const [flippedCardId, setFlippedCardId] = useState(null);

    useEffect(() => {
        window.scrollTo(0, 0);
    }, [tela]);

    // Desbloquear automaticamente o m√≥dulo 1 apenas uma vez
    useEffect(() => {
        if (tela === "conclusaoIntro") {
            // Chama a fun√ß√£o apenas uma vez, se ainda n√£o foi completado
            const jaDesbloqueado = localStorage.getItem("introCompleta");
            if (!jaDesbloqueado) {
                onCompleteIntro && onCompleteIntro();
                localStorage.setItem("introCompleta", "true");
            }
        } else {
            // Quando voltar para teoria ou quiz, n√£o faz nada
            // (n√£o reativa o desbloqueio nem altera o estado)
        }
    }, [tela, onCompleteIntro]);

    const handleIntroQuizComplete = () => {
        setTela('conclusaoIntro');
    };

    const [videoAssistido, setVideoAssistido] = useState(false);

    // Fun√ß√£o chamada quando o v√≠deo termina
    const handleVideoEnd = () => {
        setVideoAssistido(true);
    };

    // Configura√ß√µes do player
    const videoOptions = {
        height: '400',
        width: '100%',
        playerVars: {
            autoplay: 0, // n√£o come√ßar automaticamente
        },
    };

    return (
        <div className="intro-container"> {/* Adiciona a classe .module para aproveitar espa√ßamentos */}
            {tela === 'teoria' && (
                <div className="tela-conteudo">
                    <header className="module-header">
                        <h1>Introdu√ß√£o üöÄ</h1>
                    </header>
                    <section className="texto-explicativo">
                        <h3>O que √© Pensamento Computacional?</h3>
                        <p>Voc√™ j√° se deparou com um problema muito grande, que parecia dif√≠cil de resolver? Como montar um quebra-cabe√ßa de muitas pe√ßas ou arrumar um quarto super bagun√ßado?</p>
                        <p>O Pensamento Computacional n√£o √© sobre "pensar como um computador". Na verdade, √© o contr√°rio: √© um <strong>superpoder que n√≥s, humanos, usamos para ensinar os computadores a resolver problemas</strong>. √â uma forma de pensar e organizar ideias para que qualquer problema, n√£o importa o tamanho, possa ser resolvido passo a passo.</p>
                        <p>Para usar esse superpoder, n√≥s seguimos <strong>4 caminhos</strong> ou <strong>pilares:</strong></p>
                        <ul>
                            <li><strong>Decomposi√ß√£o:</strong> Quebrar o problem√£o em probleminhas.</li>
                            <li><strong>Reconhecimento de Padr√µes:</strong> Encontrar semelhan√ßas entre eles.</li>
                            <li><strong>Abstra√ß√£o:</strong> Focar no que √© importante e ignorar o resto.</li>
                            <li><strong>Algoritmos:</strong> Criar um plano passo a passo para resolver.</li>
                        </ul>
                        <p>Vamos explorar cada um desses pilares juntos!</p>
                    </section>

                    <div className="pilares-titulo-container">
                        <h4>Clique nos cards abaixo para ver exemplos:</h4>
                    </div>
                    <section className="pilares-container">
                        {PILARES_CARDS.map(pilar => (
                            <div key={pilar.id} className="flip-card" onClick={() => setFlippedCardId(flippedCardId === pilar.id ? null : pilar.id)}>
                                <div className={`flip-card-inner ${flippedCardId === pilar.id ? 'flipped' : ''}`}>
                                    <div className="flip-card-front">
                                        <div className="pilar-icone">{pilar.frenteIcone}</div>
                                        <h4>{pilar.pilar}</h4>
                                    </div>
                                    <div className="flip-card-back">
                                        <p>{pilar.versoTexto}</p>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </section>

                    <div className="video-container">
                        <h4>V√≠deo de Apoio</h4>

                        <YouTube
                            videoId="pRpjYrdb9UY" // apenas o ID do v√≠deo
                            opts={videoOptions}
                            onEnd={handleVideoEnd} // detecta quando o v√≠deo termina
                        />
                    </div>

                    <footer className="module-footer">
                        <button className="btn btn-icon" onClick={onBackHome} aria-label="Voltar ao Menu">
                            <svg viewBox="0 0 24 24"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"></path></svg>
                        </button>
                        <button
                            className="btn"
                            onClick={() => setTela('quiz')}
                            disabled={!videoAssistido}
                            style={{
                                opacity: videoAssistido ? 1 : 0.5,
                                cursor: videoAssistido ? 'pointer' : 'not-allowed',
                            }}
                        >
                            <svg className="icon-avancar" viewBox="0 0 24 24">
                                <path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"></path>
                            </svg>
                        </button>
                    </footer>
                </div>
            )}

            {tela === 'quiz' && (
                <div className="tela-conteudo quiz-screen-wrapper">
                    <Quiz
                        quizData={quizData}

                        // Chamar a nova fun√ß√£o ao completar o quiz
                        onQuizComplete={handleIntroQuizComplete}
                    // onQuestionAnswered={...}
                    />
                    <footer className="module-footer quiz-footer">
                        <button
                            className="btn btn-icon" onClick={() => setTela('teoria')} aria-label="Voltar para Teoria">
                            <svg viewBox="0 0 24 24"><path d="M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"></path></svg>
                        </button>
                        {/* Pode adicionar um bot√£o de Home aqui se quiser */}
                        {/* <button className="btn btn-icon" onClick={onBackHome} aria-label="Voltar ao Menu">...</button> */}
                    </footer>
                </div>
            )}

            {/* 4. NOVA TELA DE CONCLUS√ÉO DA INTRODU√á√ÉO */}
            {tela === 'conclusaoIntro' && (
                <div className="tela-conteudo conclusao-intro-container">
                    <h2>Muito bem! üëèüèΩüòÉ</h2>
                    <p>Voc√™ completou a <strong>Introdu√ß√£o</strong> ao Pensamento Computacional!</p>
                    <p>O <strong>M√≥dulo 1: Decomposi√ß√£o</strong> foi desbloqueado.</p>
                    <p>Clique em <strong>AVAN√áAR</strong> para acess√°-lo!</p>

                    <footer className="module-footer conclusao-intro-botoes">
                        <button
                            className="btn btn-icon"
                            onClick={onBackHome}
                            aria-label="Voltar ao Menu"
                        >
                            <svg viewBox="0 0 24 24">
                                <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"></path>
                            </svg>
                        </button>

                        <button
                            className="btn btn-icon"
                            onClick={() => setTela('teoria')}
                            aria-label="Rever Introdu√ß√£o"
                        >
                            <svg viewBox="0 0 24 24">
                                <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"></path>
                            </svg>
                        </button>

                        {/* Bot√£o para avan√ßar para o M√≥dulo 1 */}
                        <button className="btn start"
                            onClick={() => onOpenModule && onOpenModule(1)}
                            aria-label="Ir para M√≥dulo 1: Decomposi√ß√£o">
                            Avan√ßar
                            <svg className="icon-avancar" viewBox="0 0 24 24"><path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"></path></svg>
                        </button>
                    </footer>
                </div>
            )}

        </div>
    );
}