import React, { useState, useMemo, useEffect, lazy, Suspense } from 'react';
import { Routes, Route, useNavigate, useLocation, useParams } from 'react-router-dom';
import Header from './components/Header';
import Home from './pages/Home';
import { useLocalStorage } from './hooks/useLocalStorage';
import ProgressBar from './components/ProgressBar';

// Componentes pesados com lazy loading
const Module = lazy(() => import('./pages/Module'));
const IntroPage = lazy(() => import('./pages/IntroPage'));
const AboutModal = lazy(() => import('./components/AboutModal'));
const AlertModal = lazy(() => import('./components/AlertModal'));

// Componente de loading
function LoadingFallback() {
  return (
    <div className="loading-container">
      <div className="loading-spinner"></div>
      <p>Carregando...</p>
    </div>
  );
}

// Dados dos m√≥dulos
// NOVOS DADOS DOS M√ìDULOS (4 Pilares)
const MODULES = [
  // M√ìDULO 1: DECOMPOSI√á√ÉO
  {
    id: 1,
    nameModule: 'Decomposi√ß√£o',
    title: 'M√≥dulo 1: Decomposi√ß√£o',
    keyPoints: ['Aprenda a quebrar problemas grandes em partes menores.'],
    character: { face: 'üß©' },
    teoria: {
      tituloPrincipal: 'M√≥dulo 1: Decomposi√ß√£o',
      subtitulo: 'O Poder de "Quebrar" o Problema!',
      introducao: 'Bem-vindo ao primeiro caminho! A Decomposi√ß√£o √© a primeira e mais importante t√©cnica para resolver problemas.',
      explicacao: '√â bem simples: se um problema parece muito grande ou complexo, "quebre-o" em partes menores e mais f√°ceis de gerir. S√£o os "subproblemas".',
      exemploPrincipal: {
        titulo: 'Pense em arrumar o seu quarto:',
        tarefa: 'A tarefa "Arrumar o quarto" √© grande! Mas voc√™ pode decompor em:',
        subproblemas: [
          'Subproblema 1: Guardar os brinquedos.',
          'Subproblema 2: Arrumar a cama.',
          'Subproblema 3: Colocar as roupas sujas no cesto.',
        ],
        conclusao: 'Depois de resolver cada parte menor, o problema original (o quarto bagun√ßado) est√° resolvido!',
      },
      exemplosReais: {
        titulo: "Mais Exemplos da Vida Real",
        itens: [
          { titulo: "Fazer um Sandu√≠cheü•™", desc: "A tarefa 'fazer um lanche' pode ser dividida em 'preparar o sumo' e 'fazer um sandu√≠che'. O sandu√≠che em si decomp√µe-se em: pegar o p√£o, passar manteiga, colocar o queijo." },
          { titulo: "Construir com Blocosüß±", desc: "Voc√™ n√£o faz um castelo de Lego de uma vez. Decomp√µe em: 1. Fazer a base; 2. Fazer as torres; 3. Fazer o port√£o." },
          { titulo: "Trabalho da Escolaüìù", desc: "Decompor em: 1. Pesquisar o tema; 2. Escrever o texto; 3. Fazer os desenhos; 4. Criar a capa." }
        ]
      }
    },
    video: 'https://www.youtube.com/embed/VIDEO_DECOMPOSICAO',
    atividades: ['puzzle', 'mochila', 'carro'],
    quiz: [
      { q: 'O que significa "Decomposi√ß√£o"?', options: ['Juntar partes de um problema', 'Quebrar um problema em partes menores', 'Ignorar o problema'], answer: 1 },
      { q: 'Qual destes N√ÉO √© um subproblema da tarefa "Fazer um bolo"?', options: ['Misturar os ingredientes', 'Assar a massa', 'Comer o bolo'], answer: 2 },
      { q: 'Ao planejar uma viagem, "comprar passagens" e "reservar hotel" s√£o exemplos de?', options: ['Abstra√ß√£o', 'Decomposi√ß√£o', 'Padr√µes'], answer: 1 },
      { q: 'Por que decompor um problema ajuda?', options: ['Porque as partes menores s√£o mais f√°ceis de solucionar', 'Porque deixa o problema mais complicado', 'Porque elimina partes do problema'], answer: 0 },
      { q: 'Organizar os brinquedos √© um subproblema de qual tarefa maior?', options: ['Jogar futebol', 'Arrumar o quarto', 'Fazer a li√ß√£o de casa'], answer: 1 },
    ],
    finalMessage: "Voc√™ dominou a habilidade de quebrar problemas maiores em partes menores para resolver problemas ou realizar tarefas!",

  },

  // M√ìDULO 2: PADR√ïES
  {
    id: 2,
    nameModule: 'Reconhecimento de Padr√µes',
    title: 'M√≥dulo 2: Padr√µes',
    keyPoints: ['Descubra como encontrar semelhan√ßas para resolver problemas.'],
    character: { face: 'üé®' },
    teoria: {
      tituloPrincipal: 'M√≥dulo 2: Reconhecimento de Padr√µes',
      subtitulo: 'Encontrando Semelhan√ßas!',
      introducao: 'Bem vindo, esse √© o segundo caminho! Voc√™ j√° reparou que muitas coisas se repetem? Os dias da semana, as esta√ß√µes do ano, at√© mesmo a sua rotina! Tudo isso s√£o Padr√µes.',
      explicacao: 'Reconhecer padr√µes significa identificar o que se repete ou √© parecido. Isso nos ajuda a prever o que vem a seguir e a resolver problemas mais rapidamente.',
      exemploPrincipal: {
        titulo: 'Pense no seu dia na escola:',
        tarefa: 'Toda semana √© parecida:',
        subproblemas: [
          'Segunda: Aula de Matem√°tica de manh√£',
          'Ter√ßa: Aula de Matem√°tica de manh√£',
          'Padr√£o identificado: Matem√°tica sempre de manh√£!',
        ],
        conclusao: 'Ao reconhecer esse padr√£o, voc√™ j√° sabe o que esperar e pode se preparar melhor!',
      },
      exemplosReais: {
        titulo: "Mais Exemplos da Vida Real",
        itens: [
          { titulo: "M√∫sicas üéµ", desc: "As m√∫sicas t√™m padr√µes: refr√£o que se repete, versos que rimam. Identificar o padr√£o ajuda a memorizar a letra!" },
          { titulo: "Matem√°tica üßÆ", desc: "As sequ√™ncias num√©ricas (como 2, 4, 6, 8, 10...) seguem uma l√≥gica repetitiva." },
          { titulo: "Natureza üåø", desc: "As folhas de uma √°rvore t√™m formatos parecidos. As zebras t√™m listras. Tudo segue padr√µes!" }
        ]
      }
    },
    video: 'https://www.youtube.com/embed/VIDEO_PADROES', // Substitua pelo v√≠deo real
    atividades: ['completeSequencias', 'detetiveObjetos', 'padraoSecreto'],
    quiz: [
      { q: 'O que significa "Reconhecer Padr√µes"?', options: ['Ignorar as diferen√ßas', 'Identificar o que se repete', 'Criar algo novo'], answer: 1 },
      { q: 'Qual √© o padr√£o na sequ√™ncia: 2, 4, 6, 8, ...?', options: ['N√∫meros √≠mpares', 'N√∫meros pares', 'N√∫meros aleat√≥rios'], answer: 1 },
      { q: 'Por que reconhecer padr√µes √© √∫til?', options: ['Ajuda a prever o que vem depois', 'Complica as coisas', 'N√£o tem utilidade pr√°tica'], answer: 0 },
      { q: 'Qual destes N√ÉO √© um exemplo de padr√£o?', options: ['Os dias da semana', 'O alfabeto', 'Um n√∫mero aleat√≥rio'], answer: 2 },
      { q: 'Em que situa√ß√£o voc√™ usaria reconhecimento de padr√µes?', options: ['Ao decorar a letra de uma m√∫sica que tem refr√£o', 'Ao comer um lanche aleatoriamente', 'Ao dormir sem hor√°rio fixo'], answer: 0 },
    ],
    finalMessage: "Voc√™ aprendeu a identificar semelhan√ßas e padr√µes entre problemas para encontrar solu√ß√µes mais eficientes!",
  },

  // M√ìDULO 3: ABSTRA√á√ÉO
  {
    id: 3,
    nameModule: 'Abstra√ß√£o',
    title: 'M√≥dulo 3: Abstra√ß√£o',
    keyPoints: ['Aprenda a focar no essencial e ignorar o que √© desnecess√°rio.'],
    character: { face: 'üéØ' },
    teoria: {
      tituloPrincipal: 'M√≥dulo 3: Abstra√ß√£o',
      subtitulo: 'Entenda o que realmente importa, foque no essencial!',
      introducao:
        'Bem vindo, agora estamos no terceiro caminho!A Abstra√ß√£o √© a arte de "filtrar" os detalhes desnecess√°rios e focar apenas no que √© essencial para resolver o problema.',
      explicacao:
        '√â criar um modelo ou uma representa√ß√£o simplificada. Imagine um mapa de metr√¥: ele ignora as ruas, pr√©dios e √°rvores, mostrando apenas as esta√ß√µes e conex√µes ‚Äî o essencial.',
      exemploPrincipal: {
        titulo: 'Exemplo: O Mapa de Metr√¥ üó∫Ô∏è',
        tarefa:
          'Ele √© uma abstra√ß√£o! Ignora o que n√£o √© relevante e mostra s√≥ o necess√°rio para navegar: as esta√ß√µes e as linhas.',
        subproblemas: [
          'N√£o mostra pr√©dios, ruas ou √°rvores.',
          'Mostra apenas esta√ß√µes e conex√µes.',
          'Foca no que √© √∫til para o usu√°rio ‚Äî o essencial.',
        ],
        conclusao:
          'Assim como no pensamento computacional, abstrair √© decidir o que √© importante e o que pode ser ignorado.',
      },
      exemplosReais: {
        titulo: 'Mais Exemplos da Vida Real',
        itens: [
          {
            titulo: 'Emojis üôÇ',
            desc: 'S√£o abstra√ß√µes perfeitas! Ignoram detalhes como cabelo ou formato do nariz e mostram apenas a emo√ß√£o essencial.',
          },
          {
            titulo: 'Ficha de Cadastro üßæ',
            desc: 'Mostra apenas o essencial sobre uma pessoa: nome, data de nascimento, matr√≠cula. Ignora prefer√™ncias pessoais.',
          },
          {
            titulo: 'Agrupar ve√≠culos üöóüöú',
            desc: 'Ao agrupar por "possuem motor", voc√™ abstrai cor, tamanho ou marca ‚Äî foca apenas na caracter√≠stica essencial.',
          },
        ],
      },
    },
    video: 'https://www.youtube.com/embed/VIDEO_ABSTRACAO', // substitua pelo v√≠deo real depois
    atividades: ['mapaBairro', 'atributosEssenciais', 'caraCara'],
    quiz: [
      {
        q: 'O que √© Abstra√ß√£o?',
        options: [
          'Um desenho muito dif√≠cil de fazer.',
          'Focar apenas nos detalhes essenciais e ignorar o resto.',
          'Quebrar um problema em peda√ßos.',
        ],
        answer: 1,
      },
      {
        q: 'Um mapa de metr√¥ √© um bom exemplo de abstra√ß√£o porque:',
        options: [
          'Ele mostra todas as ruas e pr√©dios da cidade.',
          'Ele √© muito colorido e bonito.',
          'Ele ignora detalhes e mostra s√≥ o essencial (esta√ß√µes e linhas).',
        ],
        answer: 2,
      },
      {
        q: '"Identificar atributos essenciais" √© uma parte da Abstra√ß√£o.',
        options: ['Verdadeiro.', 'Falso.'],
        answer: 0,
      },
      {
        q: 'Qual destas √© a MELHOR abstra√ß√£o para "aluno" em um sistema de biblioteca?',
        options: [
          'Nome, comida favorita, time que torce.',
          'Nome, n√∫mero da matr√≠cula, livros que pegou.',
          'Altura, cor dos olhos, nome do cachorro.',
        ],
        answer: 1,
      },
      {
        q: 'Quando voc√™ usa um emoji üôÇ, voc√™ est√° usando...',
        options: [
          'Uma abstra√ß√£o de um rosto feliz.',
          'Uma decomposi√ß√£o de um rosto.',
          'Um padr√£o de um rosto.',
        ],
        answer: 0,
      },
    ],
    finalMessage: "Voc√™ desenvolveu a capacidade de focar apenas nos detalhes mais importantes, ignorando o que n√£o √© essencial!",

  },
  // M√ìDULO 4: ALGORITMOS 
  {
    id: 4,
    nameModule: 'Algoritmos',
    title: 'M√≥dulo 4: Algoritmos',
    keyPoints: ['Aprenda a criar sequ√™ncias de passos organizados para resolver problemas.'],
    character: { face: 'üë£' },
    teoria: {
      tituloPrincipal: 'M√≥dulo 4: Algoritmos',
      subtitulo: 'O Poder de Criar o Plano!',
      introducao: 'Bem vindo, chegamos ao √∫ltimo caminho! Agora que j√° quebramos o problema (Decomposi√ß√£o), achamos semelhan√ßas (Padr√µes) e focamos no essencial (Abstra√ß√£o), estamos prontos para criar o Algoritmo.',
      explicacao: 'Um algoritmo √© a "receita" final! √â uma sequ√™ncia de passos clara e ordenada para resolver o problema.',
      blocosConstrucao: {
        titulo: 'Para criar algoritmos, precisamos de 3 blocos de constru√ß√£o m√°gicos:',
        blocos: [
          {
            nome: 'Sequ√™ncias',
            icone: '1Ô∏è‚É£',
            descricao: 'A ordem exata dos passos',
            exemplo: 'Ex: 1. Pegar a meia; 2. Cal√ßar a meia. A ordem importa!'
          },
          {
            nome: 'Sele√ß√µes (Condi√ß√µes)',
            icone: 'üîÄ',
            descricao: 'A habilidade de fazer escolhas',
            exemplo: 'Ex: SE o sinal estiver verde, ENT√ÉO atravesse; SEN√ÉO espere.'
          },
          {
            nome: 'Repeti√ß√µes (La√ßos)',
            icone: 'üîÅ',
            descricao: 'A habilidade de fazer algo v√°rias vezes',
            exemplo: 'Ex: ENQUANTO o prato n√£o estiver limpo, FA√áA: continue lavando.'
          }
        ],
        conclusao: 'Com esses 3 blocos, voc√™ pode construir a solu√ß√£o para quase qualquer problema!'
      },
      exemplosReais: {
        titulo: 'Mais Exemplos da Vida Real',
        itens: [
          {
            titulo: 'Sequ√™ncia: Receita de Bolo üç∞',
            desc: 'Seguir os passos na ordem: 1. Misturar; 2. Assar; 3. Decorar. A ordem √© fundamental!'
          },
          {
            titulo: 'Condi√ß√£o: Atravessar a Rua üö¶',
            desc: 'SE o sem√°foro estiver vermelho OU amarelo, aguarde na cal√ßada. SEN√ÉO, atravesse a rua.'
          },
          {
            titulo: 'Repeti√ß√£o: Escovar os Dentes ü™•',
            desc: 'REPITA 10 vezes: escove para cima e para baixo. Ou: ENQUANTO houver pasta, continue escovando.'
          }
        ]
      }
    },
    video: 'https://www.youtube.com/embed/VIDEO_ALGORITMOS',
    atividades: ['roboSequencias', 'roboCondicoes', 'roboRepeticoes'],
    quiz: [
      {
        q: 'Qual habilidade da BNCC define os 3 blocos de constru√ß√£o dos algoritmos?',
        options: [
          'Sequ√™ncias, Sele√ß√µes Condicionais e Repeti√ß√µes.',
          'Decomposi√ß√£o, Padr√µes e Abstra√ß√£o.',
          'Hardware, Software e Internet.'
        ],
        answer: 0
      },
      {
        q: '"Cal√ßar as meias ANTES de cal√ßar os sapatos" √© um exemplo de:',
        options: ['Condi√ß√£o.', 'Repeti√ß√£o.', 'Sequ√™ncia.'],
        answer: 2
      },
      {
        q: 'O bloco "SE... ENT√ÉO... SEN√ÉO" √© usado para qual parte do algoritmo?',
        options: ['Sequ√™ncia.', 'Sele√ß√£o Condicional.', 'Repeti√ß√£o.'],
        answer: 1
      },
      {
        q: '"Enquanto o prato estiver sujo, continue lavando" √© um exemplo de:',
        options: ['Repeti√ß√£o.', 'Condi√ß√£o.', 'Sequ√™ncia.'],
        answer: 0
      },
      {
        q: 'Juntando os 4 Pilares: Qual √© o √∫ltimo passo para resolver um problema?',
        options: [
          'Decompor o problema.',
          'Encontrar padr√µes.',
          'Criar o Algoritmo (o plano passo a passo).'
        ],
        answer: 2
      }
    ],
    finalMessage: "Voc√™ agora entende como criar instru√ß√µes passo a passo para resolver problemas e automatizar tarefas!",
  }
];

// DADOS PARA O QUIZ DA INTRODU√á√ÉO
const INTRO_DATA = {
  quiz: [
    {
      q: 'O que √© Pensamento Computacional?',
      options: ['Pensar exatamente como um rob√¥.', 'Uma forma de organizar ideias para resolver problemas.', 'Usar o computador o dia todo.'],
      answer: 1, // Resposta: b
    },
    {
      q: 'Quais s√£o os 4 pilares do Pensamento Computacional?',
      options: ['Decomposi√ß√£o, Reconhecimento de Padr√µes, Abstra√ß√£o e Algoritmos.', 'Ler, Escrever, Contar e Desenhar.', 'Sequ√™ncias, Condi√ß√µes, Repeti√ß√µes e Rob√¥s.'],
      answer: 0, // Resposta: a
    },
  ]
};

// --- Componente Wrapper para o M√≥dulo ---
// Precisamos disto para ler o :id da URL e passar os dados corretos para o <Module>
function ModuleWrapper({ modules, progress, onComplete, onBackHome, onAdvance, onReset, onProgressUpdate, setAlert }) {
  const { id } = useParams(); // L√™ o "id" da URL (ex: /modulo/1 -> id = "1")
  const moduleId = parseInt(id, 10);
  const moduleData = modules.find((m) => m.id === moduleId);

  if (!moduleData) {
    return <div>M√≥dulo n√£o encontrado!</div>;
  }

  return (
    <Module
      moduleData={moduleData}
      onComplete={() => onComplete(moduleId)}
      onBackHome={onBackHome}
      onAdvance={() => {
        // L√≥gica de avan√ßo que j√° tinha
        const nextModuleIndex = modules.findIndex(m => m.id === moduleId) + 1;
        if (nextModuleIndex < modules.length) {
          const nextModule = modules[nextModuleIndex];
          const prevModuleId = nextModule.id - 1;
          if (progress[prevModuleId]?.everCompleted) {
            onAdvance(nextModule.id); // Chama a fun√ß√£o de avan√ßo com o ID
          } else {
            setAlert({ isOpen: true, message: 'Voc√™ precisa completar o m√≥dulo anterior primeiro!' });
          }
        } else {
          onBackHome(); // Volta para home
        }
      }}
      onReset={() => onReset(moduleId)} // Passa a fun√ß√£o com o ID
      progress={progress[moduleId] || {}}
      onProgressUpdate={(percent) => onProgressUpdate(moduleId, percent)}
    />
  );
}
// --- Fim do Wrapper ---

export default function App() {
  const [route, setRoute] = useState({ name: 'home' });

  const [progress, setProgress] = useLocalStorage('pc-progress', {
    intro: { completed: false }
  });

  const resetAllProgress = () => {
    localStorage.removeItem('pc-progress'); // apaga os dados salvos
    window.location.reload(); // recarrega a p√°gina para aplicar o reset
  };

  const [aboutOpen, setAboutOpen] = useState(false);
  const [alert, setAlert] = useState({ isOpen: false, message: '' });

  // Adicionar hooks de navega√ß√£o e localiza√ß√£o
  const navigate = useNavigate();
  const location = useLocation();
  const isHomePage = location.pathname === '/'; // Verifica se estamos na Home

  // Este efeito executa sempre que a 'route' mudar.
  useEffect(() => {
    window.scrollTo(0, 0);
  }, [route]);

  const openModule = (moduleId) => navigate(`/modulo/${moduleId}`);
  const goHome = () => navigate('/');
  const startIntro = () => navigate('/introducao');

  // marca conclu√≠do e garante percent = 100
  const completeModule = (moduleId) => {
    setProgress((p) => ({
      ...p,
      [moduleId]: {
        ...(p[moduleId] || {}),
        completed: true,    // Marca como completo na sess√£o atual
        percent: 100,
        everCompleted: true, // <<< MARCA QUE J√Å FOI COMPLETADO ALGUMA VEZ
        badges: Array.from(new Set([...(p[moduleId]?.badges || []), `badge-module-${moduleId}`])),
      },
    }));
  };

  const completeIntro = () => {
    setProgress((p) => ({
      ...p,
      intro: { completed: true }
    }));
  };

  // atualiza progresso percentual tempor√°rio (n√£o marca conclu√≠do automaticamente)
  const updateModuleProgress = (moduleId, percent) => {
    setProgress((p) => ({
      ...p,
      [moduleId]: {
        ...(p[moduleId] || {}), // Mant√©m o everCompleted se j√° existir
        percent,
        completed: p[moduleId]?.completed || percent === 100, // N√£o muda completed aqui, s√≥ se chegar a 100
        badges: p[moduleId]?.badges || [],
      },
    }));
  };

  const resetModule = (moduleId) => {
    setProgress((p) => ({
      ...p,
      [moduleId]: {
        ...p[moduleId], // Mant√©m badges e everCompleted
        completed: false, // Permite entrar novamente
        percent: 0,       // Reseta o progresso da sess√£o atual
      },
    }));
  };

  const badges = useMemo(() => Object.values(progress).flatMap((m) => m.badges || []), [progress]);

  return (
    <div className="app-root">
      <Header
        onOpenAbout={() => setAboutOpen(true)}
        onOpenForm={() => window.open('https://forms.gle/', '_blank')}
        // Usar 'isHomePage' para l√≥gica condicional
        showHomeButtons={isHomePage}
      />

      <main className={`container ${isHomePage ? 'home-bg' : ''}`}>

        <Suspense fallback={<LoadingFallback />}>
          <Routes>
            <Route
              path="/"
              element={
                <Home
                  modules={MODULES}
                  onStart={startIntro}
                  onOpenModule={openModule}
                  progress={progress}
                  onShowAlert={(message) => setAlert({ isOpen: true, message })}
                />
              }
            />
            <Route
              path="/introducao"
              element={
                <IntroPage
                  quizData={INTRO_DATA.quiz}
                  onBackHome={goHome}
                  onCompleteIntro={() => {
                    completeIntro();
                  }}
                  onOpenModule={openModule}
                />
              }
            />
            <Route
              path="/modulo/:id"
              element={
                <ModuleWrapper
                  modules={MODULES}
                  progress={progress}
                  onComplete={completeModule}
                  onBackHome={goHome}
                  onAdvance={openModule} // Passa a fun√ß√£o openModule
                  onReset={resetModule}
                  onProgressUpdate={updateModuleProgress}
                  setAlert={setAlert} // Passa o setAlert para o wrapper
                />
              }
            />
            {/* Adicionar uma rota "catch-all" ou de "N√£o Encontrado" se desejar */}
            <Route path="*" element={<div>P√°gina n√£o encontrada</div>} />
          </Routes>
        </Suspense>
      </main>

      {isHomePage && (
        <footer className="footer">
          <div>¬© 2025 ‚Äî Projeto TCC ‚Ä¢ Desenvolvido em React</div>
          <button
            onClick={resetAllProgress}
            style={{
              marginLeft: '1rem',
              padding: '6px 12px',
              borderRadius: '6px',
              background: '#ff4d4f',
              color: '#fff',
              border: 'none',
              cursor: 'pointer'
            }}
          >
            Resetar progresso
          </button>
        </footer>
      )}


      {/* Renderizar o novo modal de alerta */}
      <Suspense fallback={<div />}>
        {aboutOpen && <AboutModal isOpen={aboutOpen} onClose={() => setAboutOpen(false)} />}
        <AlertModal
          isOpen={alert.isOpen}
          message={alert.message}
          onClose={() => setAlert({ isOpen: false, message: '' })}
        />
      </Suspense>

    </div>
  );
}